// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shekhirin/zenly-task/internal/pb (interfaces: Zenly_PublishServer,Zenly_SubscribeServer)

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	pb "github.com/shekhirin/zenly-task/internal/pb"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockZenly_PublishServer is a mock of Zenly_PublishServer interface
type MockZenly_PublishServer struct {
	ctrl     *gomock.Controller
	recorder *MockZenly_PublishServerMockRecorder
}

// MockZenly_PublishServerMockRecorder is the mock recorder for MockZenly_PublishServer
type MockZenly_PublishServerMockRecorder struct {
	mock *MockZenly_PublishServer
}

// NewMockZenly_PublishServer creates a new mock instance
func NewMockZenly_PublishServer(ctrl *gomock.Controller) *MockZenly_PublishServer {
	mock := &MockZenly_PublishServer{ctrl: ctrl}
	mock.recorder = &MockZenly_PublishServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZenly_PublishServer) EXPECT() *MockZenly_PublishServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockZenly_PublishServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockZenly_PublishServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockZenly_PublishServer)(nil).Context))
}

// Recv mocks base method
func (m *MockZenly_PublishServer) Recv() (*pb.PublishRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.PublishRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockZenly_PublishServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockZenly_PublishServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockZenly_PublishServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockZenly_PublishServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockZenly_PublishServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockZenly_PublishServer) SendAndClose(arg0 *pb.PublishResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockZenly_PublishServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockZenly_PublishServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockZenly_PublishServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockZenly_PublishServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockZenly_PublishServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockZenly_PublishServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockZenly_PublishServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockZenly_PublishServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockZenly_PublishServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockZenly_PublishServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockZenly_PublishServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockZenly_PublishServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockZenly_PublishServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockZenly_PublishServer)(nil).SetTrailer), arg0)
}

// MockZenly_SubscribeServer is a mock of Zenly_SubscribeServer interface
type MockZenly_SubscribeServer struct {
	ctrl     *gomock.Controller
	recorder *MockZenly_SubscribeServerMockRecorder
}

// MockZenly_SubscribeServerMockRecorder is the mock recorder for MockZenly_SubscribeServer
type MockZenly_SubscribeServerMockRecorder struct {
	mock *MockZenly_SubscribeServer
}

// NewMockZenly_SubscribeServer creates a new mock instance
func NewMockZenly_SubscribeServer(ctrl *gomock.Controller) *MockZenly_SubscribeServer {
	mock := &MockZenly_SubscribeServer{ctrl: ctrl}
	mock.recorder = &MockZenly_SubscribeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZenly_SubscribeServer) EXPECT() *MockZenly_SubscribeServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockZenly_SubscribeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockZenly_SubscribeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockZenly_SubscribeServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockZenly_SubscribeServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockZenly_SubscribeServer) Send(arg0 *pb.SubscribeResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockZenly_SubscribeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockZenly_SubscribeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockZenly_SubscribeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockZenly_SubscribeServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockZenly_SubscribeServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockZenly_SubscribeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockZenly_SubscribeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockZenly_SubscribeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockZenly_SubscribeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockZenly_SubscribeServer)(nil).SetTrailer), arg0)
}
