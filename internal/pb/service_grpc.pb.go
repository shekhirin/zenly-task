// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ZenlyClient is the client API for Zenly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZenlyClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Zenly_PublishClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Zenly_SubscribeClient, error)
}

type zenlyClient struct {
	cc grpc.ClientConnInterface
}

func NewZenlyClient(cc grpc.ClientConnInterface) ZenlyClient {
	return &zenlyClient{cc}
}

var zenlyPublishStreamDesc = &grpc.StreamDesc{
	StreamName:    "Publish",
	ClientStreams: true,
}

func (c *zenlyClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Zenly_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, zenlyPublishStreamDesc, "/proto.Zenly/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &zenlyPublishClient{stream}
	return x, nil
}

type Zenly_PublishClient interface {
	Send(*PublishRequest) error
	CloseAndRecv() (*PublishResponse, error)
	grpc.ClientStream
}

type zenlyPublishClient struct {
	grpc.ClientStream
}

func (x *zenlyPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zenlyPublishClient) CloseAndRecv() (*PublishResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var zenlySubscribeStreamDesc = &grpc.StreamDesc{
	StreamName:    "Subscribe",
	ServerStreams: true,
}

func (c *zenlyClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Zenly_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, zenlySubscribeStreamDesc, "/proto.Zenly/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &zenlySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zenly_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type zenlySubscribeClient struct {
	grpc.ClientStream
}

func (x *zenlySubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ZenlyService is the service API for Zenly service.
// Fields should be assigned to their respective handler implementations only before
// RegisterZenlyService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ZenlyService struct {
	Publish   func(Zenly_PublishServer) error
	Subscribe func(*SubscribeRequest, Zenly_SubscribeServer) error
}

func (s *ZenlyService) publish(_ interface{}, stream grpc.ServerStream) error {
	return s.Publish(&zenlyPublishServer{stream})
}
func (s *ZenlyService) subscribe(_ interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Subscribe(m, &zenlySubscribeServer{stream})
}

type Zenly_PublishServer interface {
	SendAndClose(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type zenlyPublishServer struct {
	grpc.ServerStream
}

func (x *zenlyPublishServer) SendAndClose(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zenlyPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type Zenly_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type zenlySubscribeServer struct {
	grpc.ServerStream
}

func (x *zenlySubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterZenlyService registers a service implementation with a gRPC server.
func RegisterZenlyService(s grpc.ServiceRegistrar, srv *ZenlyService) {
	srvCopy := *srv
	if srvCopy.Publish == nil {
		srvCopy.Publish = func(Zenly_PublishServer) error {
			return status.Errorf(codes.Unimplemented, "method Publish not implemented")
		}
	}
	if srvCopy.Subscribe == nil {
		srvCopy.Subscribe = func(*SubscribeRequest, Zenly_SubscribeServer) error {
			return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "proto.Zenly",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Publish",
				Handler:       srvCopy.publish,
				ClientStreams: true,
			},
			{
				StreamName:    "Subscribe",
				Handler:       srvCopy.subscribe,
				ServerStreams: true,
			},
		},
		Metadata: "service.proto",
	}

	s.RegisterService(&sd, nil)
}
