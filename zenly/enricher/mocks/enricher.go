// Code generated by MockGen. DO NOT EDIT.
// Source: enricher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	enricher "github.com/shekhirin/zenly-task/zenly/enricher"
	reflect "reflect"
)

// MockEnricher is a mock of Enricher interface
type MockEnricher struct {
	ctrl     *gomock.Controller
	recorder *MockEnricherMockRecorder
}

// MockEnricherMockRecorder is the mock recorder for MockEnricher
type MockEnricherMockRecorder struct {
	mock *MockEnricher
}

// NewMockEnricher creates a new mock instance
func NewMockEnricher(ctrl *gomock.Controller) *MockEnricher {
	mock := &MockEnricher{ctrl: ctrl}
	mock.recorder = &MockEnricherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnricher) EXPECT() *MockEnricherMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockEnricher) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockEnricherMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockEnricher)(nil).String))
}

// Enrich mocks base method
func (m *MockEnricher) Enrich(payload enricher.Payload) enricher.SetFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enrich", payload)
	ret0, _ := ret[0].(enricher.SetFunc)
	return ret0
}

// Enrich indicates an expected call of Enrich
func (mr *MockEnricherMockRecorder) Enrich(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enrich", reflect.TypeOf((*MockEnricher)(nil).Enrich), payload)
}
